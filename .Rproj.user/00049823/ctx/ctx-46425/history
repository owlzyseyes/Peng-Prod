from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
# Creating an API for model predictions
app = VetiverAPI(v, check_prototype = True)
app.run(port=8080)
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
app.run(port=8080)
app.run(port=8080)
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
# Creating an API for model predictions
app = VetiverAPI(v, check_prototype = True)
app.run(port=8080)
print("Model features:", v.model.feature_names_)
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
print("Model features:", v.model.feature_names_)
vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
print("Model features:", v.model.feature_names_in_)
vetiver_pin_write(model_board, v)
app.run(port=8080)
app.run(port=8080)
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
import pandas as pd
# Create a sample input that matches your current values
sample_input = pd.DataFrame({
'bill_length_mm': [45.0],
'species_Chinstrap': [False],
'species_Gentoo': [False],
'sex_male': [True]
})
# Print the sample input types
print("Sample input dtypes:")
print(sample_input.dtypes)
# Create and configure the API with debugging
v = VetiverModel(model, "my_model")
app = VetiverAPI(v, check_prototype=True)
# Print the model's expected input structure
print("\nModel prototype:")
print(v.prototype)
# Try a test prediction
try:
pred = v.model.predict(sample_input)
print("\nTest prediction successful:", pred)
except Exception as e:
print("\nError in test prediction:", str(e))
app.run(port=8080)
app.run(port=8080)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
print("Model features:", v.model.feature_names_in_)
vetiver_pin_write(model_board, v)
# Creating an API for model predictions
app = VetiverAPI(v, check_prototype = True)
app.run(port=8080)
app.run(port=8080)
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
print("Model features:", v.model.feature_names_in_)
vetiver_pin_write(model_board, v)
app.run(port=8080)
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel, VetiverAPI
v = VetiverModel(model, "my_model")
model_board = board_folder("/data/model", allow_pickle_read = True)
print("Model features:", v.model.feature_names_in_)
vetiver_pin_write(model_board, v)
app.run(port=8080)
app.run(port=8080)
app.run(port=8080)
app.run(port=8080)
app.run(port=8080)
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
renv::activate()
reticulate::repl_python()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(reticulate)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Bill length vs Body mass",
x = "Bill length (mm)",
y = "Body mass (g)") + theme_minimal()
DBI::dbDisconnect(con)
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(reticulate)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Bill length vs Body mass",
x = "Bill length (mm)",
y = "Body mass (g)") + theme_minimal()
app.run(port=8080)
reticulate::repl_python()
gc()
renv::activate()
install.packages("log4r")
renv::snapshot()
reticulate::repl_python()
renv::activate()
